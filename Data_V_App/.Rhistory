data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=as.factor(Survived)))+
geom_col()
})
}
shinyApp(ui=ui,server=server)
shinyApp(ui=ui,server=server)
shinyApp(ui=ui,server=server)
runApp('C:/Users/Student/Desktop/Data_Visualisation/Data_Visualisation_1/Data_V_App')
shinyApp(ui=ui,server=server)
runApp('C:/Users/Student/Desktop/Data_Visualisation/Data_Visualisation_1/Data_V_App')
runApp('C:/Users/Student/Desktop/Data_Visualisation/Data_Visualisation_1/Data_V_App')
shinyApp(ui=ui,server=server)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input)
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived)))+
geom_col()
})
}
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input)
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n))+
geom_col()
})
}
shinyApp(ui=ui,server=server)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input)
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()
})
}
shinyApp(ui=ui,server=server)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()
})
}
shinyApp(ui=ui,server=server)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill="red"))+
geom_col()
})
}
shinyApp(ui=ui,server=server)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill="blue"))+
geom_col()
})
}
shinyApp(ui=ui,server=server)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()
})
}
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()
})
}
shinyApp(ui=ui,server=server)
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
library(shiny)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
selectInput(inputId = "gender_input",label = "Select Gender",choices = c("male","female"))
#label-> is what the user is going to see n the dashboard side bar
#choices -> these are the different options the user can select
#input_Id = "gender_input"-> is going to be used in the server (check in server how its used)
),
dashboardBody(
column(width = 6, plotOutput("plot1_survived",height=200))
)
)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme(plot.title = element_text(hjust=0.5))
})
}
shinyApp(ui=ui,server=server)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
selectInput(inputId = "gender_input",label = "Select Gender",choices = c("male","female"))
#label-> is what the user is going to see n the dashboard side bar
#choices -> these are the different options the user can select
#input_Id = "gender_input"-> is going to be used in the server (check in server how its used)
),
dashboardBody(
column(width = 6, plotOutput("plot1_survived",height=200))
column(width = 6, plotOutput("plot1_survived_1",height=200))
)
)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme(plot.title = element_text(hjust=0.5))
})
}
shiny::runApp('C:/Users/Student/Desktop/Data_Visualisation/Data_Visualisation_1/Data_V_App')
runApp('C:/Users/Student/Desktop/Data_Visualisation/Data_Visualisation_1/Data_V_App')
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme(plot.title = element_text(hjust=0.5))
})
output$plot1_survived==== <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme(plot.title = element_text(hjust=0.5))
})
}
runApp('C:/Users/Student/Desktop/Data_Visualisation/Data_Visualisation_1/Data_V_App')
library(shiny)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
selectInput(inputId = "gender_input",label = "Select Gender",choices = c("male","female"))
#label-> is what the user is going to see n the dashboard side bar
#choices -> these are the different options the user can select
#input_Id = "gender_input"-> is going to be used in the server (check in server how its used)
),
dashboardBody(
column(width = 6, plotOutput("plot1_survived",height=200))
column(width = 6, plotOutput("plot2_survived",height=200))
)
)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
selectInput(inputId = "gender_input",label = "Select Gender",choices = c("male","female"))
#label-> is what the user is going to see n the dashboard side bar
#choices -> these are the different options the user can select
#input_Id = "gender_input"-> is going to be used in the server (check in server how its used)
),
dashboardBody(
column(width = 6, plotOutput("plot1_survived",height=200)),
column(width = 6, plotOutput("plot2_survived",height=200))
)
)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme(plot.title = element_text(hjust=0.5))
})
output$plot2_survived==== <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme(plot.title = element_text(hjust=0.5))
})
}
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme(plot.title = element_text(hjust=0.5))
}),
output$plot2_survived==== <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme(plot.title = element_text(hjust=0.5))
})
}
shinyApp(ui=ui,server=server)
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme(plot.title = element_text(hjust=0.5))
})
output$plot2_survived==== <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme(plot.title = element_text(hjust=0.5))
})
library(shiny)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
selectInput(inputId = "gender_input",label = "Select Gender",choices = c("male","female"))
#label-> is what the user is going to see n the dashboard side bar
#choices -> these are the different options the user can select
#input_Id = "gender_input"-> is going to be used in the server (check in server how its used)
),
dashboardBody(
column(width = 6, plotOutput("plot1_survived",height=200)),
column(width = 6, plotOutput("plot2_survived",height=200))
)
)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme_classic()+
theme(plot.title = element_text(hjust=0.5))
})
output$plot2_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme_linedraw()+
theme(plot.title = element_text(hjust=0.5))
})
}
shinyApp(ui=ui,server=server)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme_classic()+
theme_linedraw()+
theme(plot.title = element_text(hjust=0.5))
})
output$plot2_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme_linedraw()+
theme(plot.title = element_text(hjust=0.5))
})
}
shinyApp(ui=ui,server=server)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme_classic()+
theme_linedraw()+
theme(plot.title = element_text(hjust=0.5))
})
output$plot2_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme_linedraw()+
theme_void()+
theme(plot.title = element_text(hjust=0.5))
})
}
shinyApp(ui=ui,server=server)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme_classic()+
theme_linedraw()+
theme(plot.title = element_text(hjust=0.5))
})
output$plot2_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme_linedraw()+facet_wrap(~Embarked)+
theme(plot.title = element_text(hjust=0.5))
})
}
shinyApp(ui=ui,server=server)
library(shiny)
library(shinydashboard)
library(tidyverse)
library(ggplot2)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
selectInput(inputId = "gender_input",label = "Select Gender",choices = c("Male"="male","Female"="female")),
#label-> is what the user is going to see n the dashboard side bar
#choices -> these are the different options the user can select
#input_Id = "gender_input"-> is going to be used in the server (check in server how its used)
radioButtons("gender_button","Select Gender",choiceNames=c("Male","Female"),choiceValues = "male","female")
),
dashboardBody(
column(width = 6, plotOutput("plot1_survived",height=200)),
column(width = 6, plotOutput("plot2_survived",height=200))
)
)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
selectInput(inputId = "gender_input",label = "Select Gender",choices = c("Male"="male","Female"="female")),
#label-> is what the user is going to see n the dashboard side bar
#choices -> these are the different options the user can select
#input_Id = "gender_input"-> is going to be used in the server (check in server how its used)
radioButtons("gender_button","Select Gender",choiceNames="Male","Female",choiceValues = "male","female")
),
dashboardBody(
column(width = 6, plotOutput("plot1_survived",height=200)),
column(width = 6, plotOutput("plot2_survived",height=200))
)
)
ui <- dashboardPage(
dashboardHeader(),
dashboardSidebar(
selectInput(inputId = "gender_input",label = "Select Gender",choices = c("Male"="male","Female"="female")),
#label-> is what the user is going to see n the dashboard side bar
#choices -> these are the different options the user can select
#input_Id = "gender_input"-> is going to be used in the server (check in server how its used)
radioButtons("gender_button","Select Gender",choiceNames=c("Male","Female"),choiceValues = c("male","female"))
),
dashboardBody(
column(width = 6, plotOutput("plot1_survived",height=200)),
column(width = 6, plotOutput("plot2_survived",height=200))
)
)
server <- function(input,output){
df<-tibble(read.csv("train.csv"))
data_gender<- reactive({
df_1 <- df %>% filter(Sex==input$gender_input) %>%
mutate(Survived=as.factor(Survived),Survived=as.factor(Survived))
df_2 <- na.omit(df_1)
return(df_2)
})
output$plot1_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme_classic()+
theme_linedraw()+
theme(plot.title = element_text(hjust=0.5))
})
output$plot2_survived <- renderPlot({
data_gender() %>% group_by(Pclass,Survived) %>% count() %>%
ggplot(aes(Pclass,y=n,fill=Survived))+
geom_col()+
labs(x="Classes",y="Number of Survived/Not Survived",title="Titanic Data")+
theme_linedraw()+
theme(plot.title = element_text(hjust=0.5))
})
}
shinyApp(ui=ui,server=server)
runApp('C:/Users/Student/Desktop/Data_Visualisation/Data_Visualisation_1/Data_V_App')
